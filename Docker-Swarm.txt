Docker Swarm :

Need to run below in Master machine

$ docker swarm init optional (--advertise-addr $(hostname -i)) This needs to run while you are working in Docker play

Swarm initialized: current node (x12yfp7mfnmkuskv7kud6bafx) is now a manager.

To add a worker to this swarm, run the following command:

The below cmd needs to run in the Node machine to join the nodes

    docker swarm join --token SWMTKN-1-08iluipix2qs3u4vd1yvbph0e84pt93toat7yrfcrl7f14wvjx-527dk6em757e3xa58d62xod4a 192.168.0.52:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

[node2] (local) root@192.168.0.52 ~

This will join the node as manager

$ docker swarm join-token manager
To add a manager to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-08iluipix2qs3u4vd1yvbph0e84pt93toat7yrfcrl7f14wvjx-brpncg39wrnmj6hlqx9kdz12g 192.168.0.52:2377

The above commond needs to run in node machine to make the node machine as backup manager machine

Running the multiple nginx container with diff machines

creating the services using Docker swarn:

$ docker service create --name web --replicas 10 -p 8080:80 nginx
i09d9lw0q0xba0jzttplp30u0
overall progress: 10 out of 10 tasks
1/10: running   [==================================================>]
2/10: running   [==================================================>]
3/10: running   [==================================================>]
4/10: running   [==================================================>]
5/10: running   [==================================================>]
6/10: running   [==================================================>]
7/10: running   [==================================================>]
8/10: running   [==================================================>]
9/10: running   [==================================================>]
10/10: running   [==================================================>]

Master Machine:
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
36c7a0d85a82        nginx:latest        "nginx -g 'daemon of…"   19 seconds ago      Up 13 seconds       80/tcp              web.9.qctvojlcdqdgn2f12rrkjhqj5
a0eb9082f693        nginx:latest        "nginx -g 'daemon of…"   19 seconds ago      Up 12 seconds       80/tcp              web.7.r92wlmt20eeolhw0bqsh78rpk

Node1:

[node1] (local) root@192.168.0.53 ~
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS   NAMES
e8923d3be452        nginx:latest        "nginx -g 'daemon of…"   45 seconds ago      Up 39 seconds       80/tcp   web.8.8tdx5hzdcg6jusnogkyp7wv5d
ad821dc8b649        nginx:latest        "nginx -g 'daemon of…"   45 seconds ago      Up 39 seconds       80/tcp   web.5.ighve9lpspgqs1398j0odh6nk

Node2:

[node3] (local) root@192.168.0.51 ~
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS   NAMES
e7c907c22200        nginx:latest        "nginx -g 'daemon of…"   51 seconds ago      Up 41 seconds       80/tcp   web.1.rx4m2rxwhn5gz2jxio8xtme2q
a210ea51fbf2        nginx:latest        "nginx -g 'daemon of…"   51 seconds ago      Up 42 seconds       80/tcp   web.3.w17ywocqsgy9irgf65qfvvi5k
5a4b0d148d3e        nginx:latest        "nginx -g 'daemon of…"   51 seconds ago      Up 43 seconds       80/tcp   web.6.vcu7l3jxkalt05kl5vox1jwvq

Node3:

[node4] (local) root@192.168.0.50 ~
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS   NAMES
28ab75692473        nginx:latest        "nginx -g 'daemon of…"   57 seconds ago      Up 47 seconds       80/tcp   web.10.lyra8xxcfyp7fjxf0ssf5tbxk
2becc63cf510        nginx:latest        "nginx -g 'daemon of…"   57 seconds ago      Up 47 seconds       80/tcp   web.4.eo34qgk9p6ls9ip8g64v1h1s5
7bdbd3f03dd5        nginx:latest        "nginx -g 'daemon of…"   57 seconds ago      Up 51 seconds       80/tcp   web.2.qhkjf64rmj765b4n52r3bozoj

To drain the container running on manger machine

[node2] (local) root@192.168.0.52 ~
$ docker node update --availability drain node2
node2

This will stops the container running on master machine and same container will be shifting to available node machine.

after the above cmd

Master Machine:
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES

Node1:

[node1] (local) root@192.168.0.53 ~
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS   NAMES
441e14ba14b1        nginx:latest        "nginx -g 'daemon of…"   31 seconds ago      Up 22 seconds       80/tcp   web.7.tqkhvfosizedzn854immsxcle
9ed9d8aaab42        nginx:latest        "nginx -g 'daemon of…"   31 seconds ago      Up 22 seconds       80/tcp   web.9.x5eowiaaa1tz0idffxmpkqo6i
e8923d3be452        nginx:latest        "nginx -g 'daemon of…"   6 minutes ago       Up 6 minutes        80/tcp   web.8.8tdx5hzdcg6jusnogkyp7wv5d
ad821dc8b649        nginx:latest        "nginx -g 'daemon of…"   6 minutes ago       Up 6 minutes        80/tcp   web.5.ighve9lpspgqs1398j0odh6nk

Node2:

[node3] (local) root@192.168.0.51 ~
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS   NAMES
e7c907c22200        nginx:latest        "nginx -g 'daemon of…"   6 minutes ago       Up 6 minutes        80/tcp   web.1.rx4m2rxwhn5gz2jxio8xtme2q
a210ea51fbf2        nginx:latest        "nginx -g 'daemon of…"   6 minutes ago       Up 6 minutes        80/tcp   web.3.w17ywocqsgy9irgf65qfvvi5k
5a4b0d148d3e        nginx:latest        "nginx -g 'daemon of…"   6 minutes ago       Up 6 minutes        80/tcp   web.6.vcu7l3jxkalt05kl5vox1jwvq

Node3:

[node4] (local) root@192.168.0.50 ~
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS   NAMES
28ab75692473        nginx:latest        "nginx -g 'daemon of…"   6 minutes ago       Up 6 minutes        80/tcp   web.10.lyra8xxcfyp7fjxf0ssf5tbxk
2becc63cf510        nginx:latest        "nginx -g 'daemon of…"   6 minutes ago       Up 6 minutes        80/tcp   web.4.eo34qgk9p6ls9ip8g64v1h1s5
7bdbd3f03dd5        nginx:latest        "nginx -g 'daemon of…"   6 minutes ago       Up 6 minutes        80/tcp   web.2.qhkjf64rmj765b4n52r3bozoj

To check the instances running on node machines :

docker node ps node node2 node3 node4 node5

Inspecting the manager node and worker nodes

docker node inspect --preety self (for master node)
docker node inspect --preety node1 (for node1)

creating the services using Docker swarn:

docker service create --name web-server -p 8080:80 --replicas 4 nginx:latest

To know which instances running on which node

docker service ps web-server
